// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: wechaty/puppet.proto

package wechaty

import (
	context "context"
	puppet "github.com/wechaty/go-grpc/wechaty/puppet"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PuppetClient is the client API for Puppet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PuppetClient interface {
	//*
	// Deprecated: will be removed after Dec 31, 2022
	MessageFileStream(ctx context.Context, in *puppet.MessageFileStreamRequest, opts ...grpc.CallOption) (Puppet_MessageFileStreamClient, error)
	MessageImageStream(ctx context.Context, in *puppet.MessageImageStreamRequest, opts ...grpc.CallOption) (Puppet_MessageImageStreamClient, error)
	MessageSendFileStream(ctx context.Context, opts ...grpc.CallOption) (Puppet_MessageSendFileStreamClient, error)
	//*
	//
	// Base
	//
	Start(ctx context.Context, in *puppet.StartRequest, opts ...grpc.CallOption) (*puppet.StartResponse, error)
	Stop(ctx context.Context, in *puppet.StopRequest, opts ...grpc.CallOption) (*puppet.StopResponse, error)
	Logout(ctx context.Context, in *puppet.LogoutRequest, opts ...grpc.CallOption) (*puppet.LogoutResponse, error)
	Ding(ctx context.Context, in *puppet.DingRequest, opts ...grpc.CallOption) (*puppet.DingResponse, error)
	Version(ctx context.Context, in *puppet.VersionRequest, opts ...grpc.CallOption) (*puppet.VersionResponse, error)
	//*
	//
	// Event - Server Stream
	//
	Event(ctx context.Context, in *puppet.EventRequest, opts ...grpc.CallOption) (Puppet_EventClient, error)
	DirtyPayload(ctx context.Context, in *puppet.DirtyPayloadRequest, opts ...grpc.CallOption) (*puppet.DirtyPayloadResponse, error)
	//*
	//
	// Contact Self
	//
	ContactSelfQRCode(ctx context.Context, in *puppet.ContactSelfQRCodeRequest, opts ...grpc.CallOption) (*puppet.ContactSelfQRCodeResponse, error)
	ContactSelfName(ctx context.Context, in *puppet.ContactSelfNameRequest, opts ...grpc.CallOption) (*puppet.ContactSelfNameResponse, error)
	ContactSelfSignature(ctx context.Context, in *puppet.ContactSelfSignatureRequest, opts ...grpc.CallOption) (*puppet.ContactSelfSignatureResponse, error)
	//*
	//
	// Contact
	//
	ContactPayload(ctx context.Context, in *puppet.ContactPayloadRequest, opts ...grpc.CallOption) (*puppet.ContactPayloadResponse, error)
	ContactAlias(ctx context.Context, in *puppet.ContactAliasRequest, opts ...grpc.CallOption) (*puppet.ContactAliasResponse, error)
	ContactAvatar(ctx context.Context, in *puppet.ContactAvatarRequest, opts ...grpc.CallOption) (*puppet.ContactAvatarResponse, error)
	ContactPhone(ctx context.Context, in *puppet.ContactPhoneRequest, opts ...grpc.CallOption) (*puppet.ContactPhoneResponse, error)
	ContactCorporationRemark(ctx context.Context, in *puppet.ContactCorporationRemarkRequest, opts ...grpc.CallOption) (*puppet.ContactCorporationRemarkResponse, error)
	ContactDescription(ctx context.Context, in *puppet.ContactDescriptionRequest, opts ...grpc.CallOption) (*puppet.ContactDescriptionResponse, error)
	//*
	// Huan(202002): consider changing response to a stream in the future for better performance
	ContactList(ctx context.Context, in *puppet.ContactListRequest, opts ...grpc.CallOption) (*puppet.ContactListResponse, error)
	//*
	//
	// Friendship
	//
	FriendshipPayload(ctx context.Context, in *puppet.FriendshipPayloadRequest, opts ...grpc.CallOption) (*puppet.FriendshipPayloadResponse, error)
	FriendshipSearchPhone(ctx context.Context, in *puppet.FriendshipSearchPhoneRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchPhoneResponse, error)
	//*
	// Huan(202203): https://github.com/wechaty/puppet/issues/181
	// @deprecated use FriendshipSearchHandle instead, will be removed in v3.0
	FriendshipSearchWeixin(ctx context.Context, in *puppet.FriendshipSearchHandleRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchHandleResponse, error)
	FriendshipSearchHandle(ctx context.Context, in *puppet.FriendshipSearchHandleRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchHandleResponse, error)
	FriendshipAdd(ctx context.Context, in *puppet.FriendshipAddRequest, opts ...grpc.CallOption) (*puppet.FriendshipAddResponse, error)
	FriendshipAccept(ctx context.Context, in *puppet.FriendshipAcceptRequest, opts ...grpc.CallOption) (*puppet.FriendshipAcceptResponse, error)
	MessageFile(ctx context.Context, in *puppet.MessageFileRequest, opts ...grpc.CallOption) (*puppet.MessageFileResponse, error)
	MessageImage(ctx context.Context, in *puppet.MessageImageRequest, opts ...grpc.CallOption) (*puppet.MessageImageResponse, error)
	MessageSendFile(ctx context.Context, in *puppet.MessageSendFileRequest, opts ...grpc.CallOption) (*puppet.MessageSendFileResponse, error)
	MessagePayload(ctx context.Context, in *puppet.MessagePayloadRequest, opts ...grpc.CallOption) (*puppet.MessagePayloadResponse, error)
	MessageContact(ctx context.Context, in *puppet.MessageContactRequest, opts ...grpc.CallOption) (*puppet.MessageContactResponse, error)
	MessageMiniProgram(ctx context.Context, in *puppet.MessageMiniProgramRequest, opts ...grpc.CallOption) (*puppet.MessageMiniProgramResponse, error)
	MessageUrl(ctx context.Context, in *puppet.MessageUrlRequest, opts ...grpc.CallOption) (*puppet.MessageUrlResponse, error)
	MessageRecall(ctx context.Context, in *puppet.MessageRecallRequest, opts ...grpc.CallOption) (*puppet.MessageRecallResponse, error)
	MessageForward(ctx context.Context, in *puppet.MessageForwardRequest, opts ...grpc.CallOption) (*puppet.MessageForwardResponse, error)
	MessageLocation(ctx context.Context, in *puppet.MessageLocationRequest, opts ...grpc.CallOption) (*puppet.MessageLocationResponse, error)
	MessageSendContact(ctx context.Context, in *puppet.MessageSendContactRequest, opts ...grpc.CallOption) (*puppet.MessageSendContactResponse, error)
	MessageSendText(ctx context.Context, in *puppet.MessageSendTextRequest, opts ...grpc.CallOption) (*puppet.MessageSendTextResponse, error)
	MessageSendMiniProgram(ctx context.Context, in *puppet.MessageSendMiniProgramRequest, opts ...grpc.CallOption) (*puppet.MessageSendMiniProgramResponse, error)
	MessageSendUrl(ctx context.Context, in *puppet.MessageSendUrlRequest, opts ...grpc.CallOption) (*puppet.MessageSendUrlResponse, error)
	MessageSendLocation(ctx context.Context, in *puppet.MessageSendLocationRequest, opts ...grpc.CallOption) (*puppet.MessageSendLocationResponse, error)
	//*
	//
	// Room
	//
	RoomPayload(ctx context.Context, in *puppet.RoomPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomPayloadResponse, error)
	RoomList(ctx context.Context, in *puppet.RoomListRequest, opts ...grpc.CallOption) (*puppet.RoomListResponse, error)
	RoomAdd(ctx context.Context, in *puppet.RoomAddRequest, opts ...grpc.CallOption) (*puppet.RoomAddResponse, error)
	RoomAvatar(ctx context.Context, in *puppet.RoomAvatarRequest, opts ...grpc.CallOption) (*puppet.RoomAvatarResponse, error)
	RoomCreate(ctx context.Context, in *puppet.RoomCreateRequest, opts ...grpc.CallOption) (*puppet.RoomCreateResponse, error)
	RoomDel(ctx context.Context, in *puppet.RoomDelRequest, opts ...grpc.CallOption) (*puppet.RoomDelResponse, error)
	RoomQuit(ctx context.Context, in *puppet.RoomQuitRequest, opts ...grpc.CallOption) (*puppet.RoomQuitResponse, error)
	RoomTopic(ctx context.Context, in *puppet.RoomTopicRequest, opts ...grpc.CallOption) (*puppet.RoomTopicResponse, error)
	RoomQRCode(ctx context.Context, in *puppet.RoomQRCodeRequest, opts ...grpc.CallOption) (*puppet.RoomQRCodeResponse, error)
	RoomAnnounce(ctx context.Context, in *puppet.RoomAnnounceRequest, opts ...grpc.CallOption) (*puppet.RoomAnnounceResponse, error)
	//*
	//
	// Room Member
	//
	RoomMemberPayload(ctx context.Context, in *puppet.RoomMemberPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomMemberPayloadResponse, error)
	RoomMemberList(ctx context.Context, in *puppet.RoomMemberListRequest, opts ...grpc.CallOption) (*puppet.RoomMemberListResponse, error)
	//*
	//
	// Room Invitation
	//
	RoomInvitationPayload(ctx context.Context, in *puppet.RoomInvitationPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomInvitationPayloadResponse, error)
	RoomInvitationAccept(ctx context.Context, in *puppet.RoomInvitationAcceptRequest, opts ...grpc.CallOption) (*puppet.RoomInvitationAcceptResponse, error)
	//*
	//
	// Tag
	//
	TagContactAdd(ctx context.Context, in *puppet.TagContactAddRequest, opts ...grpc.CallOption) (*puppet.TagContactAddResponse, error)
	TagContactRemove(ctx context.Context, in *puppet.TagContactRemoveRequest, opts ...grpc.CallOption) (*puppet.TagContactRemoveResponse, error)
	//*
	// Operate Sub-Collections
	//   https://cloud.google.com/apis/design/design_patterns#list_sub-collections
	TagContactDelete(ctx context.Context, in *puppet.TagContactDeleteRequest, opts ...grpc.CallOption) (*puppet.TagContactDeleteResponse, error)
	TagContactList(ctx context.Context, in *puppet.TagContactListRequest, opts ...grpc.CallOption) (*puppet.TagContactListResponse, error)
	//*
	// File/Blob download & upload
	Download(ctx context.Context, in *puppet.DownloadRequest, opts ...grpc.CallOption) (Puppet_DownloadClient, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (Puppet_UploadClient, error)
}

type puppetClient struct {
	cc grpc.ClientConnInterface
}

func NewPuppetClient(cc grpc.ClientConnInterface) PuppetClient {
	return &puppetClient{cc}
}

func (c *puppetClient) MessageFileStream(ctx context.Context, in *puppet.MessageFileStreamRequest, opts ...grpc.CallOption) (Puppet_MessageFileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Puppet_ServiceDesc.Streams[0], "/wechaty.Puppet/MessageFileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &puppetMessageFileStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Puppet_MessageFileStreamClient interface {
	Recv() (*puppet.MessageFileStreamResponse, error)
	grpc.ClientStream
}

type puppetMessageFileStreamClient struct {
	grpc.ClientStream
}

func (x *puppetMessageFileStreamClient) Recv() (*puppet.MessageFileStreamResponse, error) {
	m := new(puppet.MessageFileStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *puppetClient) MessageImageStream(ctx context.Context, in *puppet.MessageImageStreamRequest, opts ...grpc.CallOption) (Puppet_MessageImageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Puppet_ServiceDesc.Streams[1], "/wechaty.Puppet/MessageImageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &puppetMessageImageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Puppet_MessageImageStreamClient interface {
	Recv() (*puppet.MessageImageStreamResponse, error)
	grpc.ClientStream
}

type puppetMessageImageStreamClient struct {
	grpc.ClientStream
}

func (x *puppetMessageImageStreamClient) Recv() (*puppet.MessageImageStreamResponse, error) {
	m := new(puppet.MessageImageStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *puppetClient) MessageSendFileStream(ctx context.Context, opts ...grpc.CallOption) (Puppet_MessageSendFileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Puppet_ServiceDesc.Streams[2], "/wechaty.Puppet/MessageSendFileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &puppetMessageSendFileStreamClient{stream}
	return x, nil
}

type Puppet_MessageSendFileStreamClient interface {
	Send(*puppet.MessageSendFileStreamRequest) error
	CloseAndRecv() (*puppet.MessageSendFileStreamResponse, error)
	grpc.ClientStream
}

type puppetMessageSendFileStreamClient struct {
	grpc.ClientStream
}

func (x *puppetMessageSendFileStreamClient) Send(m *puppet.MessageSendFileStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *puppetMessageSendFileStreamClient) CloseAndRecv() (*puppet.MessageSendFileStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(puppet.MessageSendFileStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *puppetClient) Start(ctx context.Context, in *puppet.StartRequest, opts ...grpc.CallOption) (*puppet.StartResponse, error) {
	out := new(puppet.StartResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Stop(ctx context.Context, in *puppet.StopRequest, opts ...grpc.CallOption) (*puppet.StopResponse, error) {
	out := new(puppet.StopResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Logout(ctx context.Context, in *puppet.LogoutRequest, opts ...grpc.CallOption) (*puppet.LogoutResponse, error) {
	out := new(puppet.LogoutResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Ding(ctx context.Context, in *puppet.DingRequest, opts ...grpc.CallOption) (*puppet.DingResponse, error) {
	out := new(puppet.DingResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Ding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Version(ctx context.Context, in *puppet.VersionRequest, opts ...grpc.CallOption) (*puppet.VersionResponse, error) {
	out := new(puppet.VersionResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Event(ctx context.Context, in *puppet.EventRequest, opts ...grpc.CallOption) (Puppet_EventClient, error) {
	stream, err := c.cc.NewStream(ctx, &Puppet_ServiceDesc.Streams[3], "/wechaty.Puppet/Event", opts...)
	if err != nil {
		return nil, err
	}
	x := &puppetEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Puppet_EventClient interface {
	Recv() (*puppet.EventResponse, error)
	grpc.ClientStream
}

type puppetEventClient struct {
	grpc.ClientStream
}

func (x *puppetEventClient) Recv() (*puppet.EventResponse, error) {
	m := new(puppet.EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *puppetClient) DirtyPayload(ctx context.Context, in *puppet.DirtyPayloadRequest, opts ...grpc.CallOption) (*puppet.DirtyPayloadResponse, error) {
	out := new(puppet.DirtyPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/DirtyPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactSelfQRCode(ctx context.Context, in *puppet.ContactSelfQRCodeRequest, opts ...grpc.CallOption) (*puppet.ContactSelfQRCodeResponse, error) {
	out := new(puppet.ContactSelfQRCodeResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactSelfQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactSelfName(ctx context.Context, in *puppet.ContactSelfNameRequest, opts ...grpc.CallOption) (*puppet.ContactSelfNameResponse, error) {
	out := new(puppet.ContactSelfNameResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactSelfName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactSelfSignature(ctx context.Context, in *puppet.ContactSelfSignatureRequest, opts ...grpc.CallOption) (*puppet.ContactSelfSignatureResponse, error) {
	out := new(puppet.ContactSelfSignatureResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactSelfSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactPayload(ctx context.Context, in *puppet.ContactPayloadRequest, opts ...grpc.CallOption) (*puppet.ContactPayloadResponse, error) {
	out := new(puppet.ContactPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactAlias(ctx context.Context, in *puppet.ContactAliasRequest, opts ...grpc.CallOption) (*puppet.ContactAliasResponse, error) {
	out := new(puppet.ContactAliasResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactAvatar(ctx context.Context, in *puppet.ContactAvatarRequest, opts ...grpc.CallOption) (*puppet.ContactAvatarResponse, error) {
	out := new(puppet.ContactAvatarResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactPhone(ctx context.Context, in *puppet.ContactPhoneRequest, opts ...grpc.CallOption) (*puppet.ContactPhoneResponse, error) {
	out := new(puppet.ContactPhoneResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactCorporationRemark(ctx context.Context, in *puppet.ContactCorporationRemarkRequest, opts ...grpc.CallOption) (*puppet.ContactCorporationRemarkResponse, error) {
	out := new(puppet.ContactCorporationRemarkResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactCorporationRemark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactDescription(ctx context.Context, in *puppet.ContactDescriptionRequest, opts ...grpc.CallOption) (*puppet.ContactDescriptionResponse, error) {
	out := new(puppet.ContactDescriptionResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactList(ctx context.Context, in *puppet.ContactListRequest, opts ...grpc.CallOption) (*puppet.ContactListResponse, error) {
	out := new(puppet.ContactListResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipPayload(ctx context.Context, in *puppet.FriendshipPayloadRequest, opts ...grpc.CallOption) (*puppet.FriendshipPayloadResponse, error) {
	out := new(puppet.FriendshipPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipSearchPhone(ctx context.Context, in *puppet.FriendshipSearchPhoneRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchPhoneResponse, error) {
	out := new(puppet.FriendshipSearchPhoneResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipSearchPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipSearchWeixin(ctx context.Context, in *puppet.FriendshipSearchHandleRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchHandleResponse, error) {
	out := new(puppet.FriendshipSearchHandleResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipSearchWeixin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipSearchHandle(ctx context.Context, in *puppet.FriendshipSearchHandleRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchHandleResponse, error) {
	out := new(puppet.FriendshipSearchHandleResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipSearchHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipAdd(ctx context.Context, in *puppet.FriendshipAddRequest, opts ...grpc.CallOption) (*puppet.FriendshipAddResponse, error) {
	out := new(puppet.FriendshipAddResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipAccept(ctx context.Context, in *puppet.FriendshipAcceptRequest, opts ...grpc.CallOption) (*puppet.FriendshipAcceptResponse, error) {
	out := new(puppet.FriendshipAcceptResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageFile(ctx context.Context, in *puppet.MessageFileRequest, opts ...grpc.CallOption) (*puppet.MessageFileResponse, error) {
	out := new(puppet.MessageFileResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageImage(ctx context.Context, in *puppet.MessageImageRequest, opts ...grpc.CallOption) (*puppet.MessageImageResponse, error) {
	out := new(puppet.MessageImageResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendFile(ctx context.Context, in *puppet.MessageSendFileRequest, opts ...grpc.CallOption) (*puppet.MessageSendFileResponse, error) {
	out := new(puppet.MessageSendFileResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessagePayload(ctx context.Context, in *puppet.MessagePayloadRequest, opts ...grpc.CallOption) (*puppet.MessagePayloadResponse, error) {
	out := new(puppet.MessagePayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessagePayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageContact(ctx context.Context, in *puppet.MessageContactRequest, opts ...grpc.CallOption) (*puppet.MessageContactResponse, error) {
	out := new(puppet.MessageContactResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageMiniProgram(ctx context.Context, in *puppet.MessageMiniProgramRequest, opts ...grpc.CallOption) (*puppet.MessageMiniProgramResponse, error) {
	out := new(puppet.MessageMiniProgramResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageMiniProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageUrl(ctx context.Context, in *puppet.MessageUrlRequest, opts ...grpc.CallOption) (*puppet.MessageUrlResponse, error) {
	out := new(puppet.MessageUrlResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageRecall(ctx context.Context, in *puppet.MessageRecallRequest, opts ...grpc.CallOption) (*puppet.MessageRecallResponse, error) {
	out := new(puppet.MessageRecallResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageRecall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageForward(ctx context.Context, in *puppet.MessageForwardRequest, opts ...grpc.CallOption) (*puppet.MessageForwardResponse, error) {
	out := new(puppet.MessageForwardResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageLocation(ctx context.Context, in *puppet.MessageLocationRequest, opts ...grpc.CallOption) (*puppet.MessageLocationResponse, error) {
	out := new(puppet.MessageLocationResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendContact(ctx context.Context, in *puppet.MessageSendContactRequest, opts ...grpc.CallOption) (*puppet.MessageSendContactResponse, error) {
	out := new(puppet.MessageSendContactResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendText(ctx context.Context, in *puppet.MessageSendTextRequest, opts ...grpc.CallOption) (*puppet.MessageSendTextResponse, error) {
	out := new(puppet.MessageSendTextResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendMiniProgram(ctx context.Context, in *puppet.MessageSendMiniProgramRequest, opts ...grpc.CallOption) (*puppet.MessageSendMiniProgramResponse, error) {
	out := new(puppet.MessageSendMiniProgramResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendMiniProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendUrl(ctx context.Context, in *puppet.MessageSendUrlRequest, opts ...grpc.CallOption) (*puppet.MessageSendUrlResponse, error) {
	out := new(puppet.MessageSendUrlResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendLocation(ctx context.Context, in *puppet.MessageSendLocationRequest, opts ...grpc.CallOption) (*puppet.MessageSendLocationResponse, error) {
	out := new(puppet.MessageSendLocationResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomPayload(ctx context.Context, in *puppet.RoomPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomPayloadResponse, error) {
	out := new(puppet.RoomPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomList(ctx context.Context, in *puppet.RoomListRequest, opts ...grpc.CallOption) (*puppet.RoomListResponse, error) {
	out := new(puppet.RoomListResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomAdd(ctx context.Context, in *puppet.RoomAddRequest, opts ...grpc.CallOption) (*puppet.RoomAddResponse, error) {
	out := new(puppet.RoomAddResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomAvatar(ctx context.Context, in *puppet.RoomAvatarRequest, opts ...grpc.CallOption) (*puppet.RoomAvatarResponse, error) {
	out := new(puppet.RoomAvatarResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomCreate(ctx context.Context, in *puppet.RoomCreateRequest, opts ...grpc.CallOption) (*puppet.RoomCreateResponse, error) {
	out := new(puppet.RoomCreateResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomDel(ctx context.Context, in *puppet.RoomDelRequest, opts ...grpc.CallOption) (*puppet.RoomDelResponse, error) {
	out := new(puppet.RoomDelResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomQuit(ctx context.Context, in *puppet.RoomQuitRequest, opts ...grpc.CallOption) (*puppet.RoomQuitResponse, error) {
	out := new(puppet.RoomQuitResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomQuit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomTopic(ctx context.Context, in *puppet.RoomTopicRequest, opts ...grpc.CallOption) (*puppet.RoomTopicResponse, error) {
	out := new(puppet.RoomTopicResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomQRCode(ctx context.Context, in *puppet.RoomQRCodeRequest, opts ...grpc.CallOption) (*puppet.RoomQRCodeResponse, error) {
	out := new(puppet.RoomQRCodeResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomAnnounce(ctx context.Context, in *puppet.RoomAnnounceRequest, opts ...grpc.CallOption) (*puppet.RoomAnnounceResponse, error) {
	out := new(puppet.RoomAnnounceResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomAnnounce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomMemberPayload(ctx context.Context, in *puppet.RoomMemberPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomMemberPayloadResponse, error) {
	out := new(puppet.RoomMemberPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomMemberPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomMemberList(ctx context.Context, in *puppet.RoomMemberListRequest, opts ...grpc.CallOption) (*puppet.RoomMemberListResponse, error) {
	out := new(puppet.RoomMemberListResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomInvitationPayload(ctx context.Context, in *puppet.RoomInvitationPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomInvitationPayloadResponse, error) {
	out := new(puppet.RoomInvitationPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomInvitationPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomInvitationAccept(ctx context.Context, in *puppet.RoomInvitationAcceptRequest, opts ...grpc.CallOption) (*puppet.RoomInvitationAcceptResponse, error) {
	out := new(puppet.RoomInvitationAcceptResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomInvitationAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) TagContactAdd(ctx context.Context, in *puppet.TagContactAddRequest, opts ...grpc.CallOption) (*puppet.TagContactAddResponse, error) {
	out := new(puppet.TagContactAddResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/TagContactAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) TagContactRemove(ctx context.Context, in *puppet.TagContactRemoveRequest, opts ...grpc.CallOption) (*puppet.TagContactRemoveResponse, error) {
	out := new(puppet.TagContactRemoveResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/TagContactRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) TagContactDelete(ctx context.Context, in *puppet.TagContactDeleteRequest, opts ...grpc.CallOption) (*puppet.TagContactDeleteResponse, error) {
	out := new(puppet.TagContactDeleteResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/TagContactDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) TagContactList(ctx context.Context, in *puppet.TagContactListRequest, opts ...grpc.CallOption) (*puppet.TagContactListResponse, error) {
	out := new(puppet.TagContactListResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/TagContactList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Download(ctx context.Context, in *puppet.DownloadRequest, opts ...grpc.CallOption) (Puppet_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Puppet_ServiceDesc.Streams[4], "/wechaty.Puppet/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &puppetDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Puppet_DownloadClient interface {
	Recv() (*puppet.DownloadResponse, error)
	grpc.ClientStream
}

type puppetDownloadClient struct {
	grpc.ClientStream
}

func (x *puppetDownloadClient) Recv() (*puppet.DownloadResponse, error) {
	m := new(puppet.DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *puppetClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Puppet_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Puppet_ServiceDesc.Streams[5], "/wechaty.Puppet/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &puppetUploadClient{stream}
	return x, nil
}

type Puppet_UploadClient interface {
	Send(*puppet.UploadRequest) error
	CloseAndRecv() (*puppet.UploadResponse, error)
	grpc.ClientStream
}

type puppetUploadClient struct {
	grpc.ClientStream
}

func (x *puppetUploadClient) Send(m *puppet.UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *puppetUploadClient) CloseAndRecv() (*puppet.UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(puppet.UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PuppetServer is the server API for Puppet service.
// All implementations must embed UnimplementedPuppetServer
// for forward compatibility
type PuppetServer interface {
	//*
	// Deprecated: will be removed after Dec 31, 2022
	MessageFileStream(*puppet.MessageFileStreamRequest, Puppet_MessageFileStreamServer) error
	MessageImageStream(*puppet.MessageImageStreamRequest, Puppet_MessageImageStreamServer) error
	MessageSendFileStream(Puppet_MessageSendFileStreamServer) error
	//*
	//
	// Base
	//
	Start(context.Context, *puppet.StartRequest) (*puppet.StartResponse, error)
	Stop(context.Context, *puppet.StopRequest) (*puppet.StopResponse, error)
	Logout(context.Context, *puppet.LogoutRequest) (*puppet.LogoutResponse, error)
	Ding(context.Context, *puppet.DingRequest) (*puppet.DingResponse, error)
	Version(context.Context, *puppet.VersionRequest) (*puppet.VersionResponse, error)
	//*
	//
	// Event - Server Stream
	//
	Event(*puppet.EventRequest, Puppet_EventServer) error
	DirtyPayload(context.Context, *puppet.DirtyPayloadRequest) (*puppet.DirtyPayloadResponse, error)
	//*
	//
	// Contact Self
	//
	ContactSelfQRCode(context.Context, *puppet.ContactSelfQRCodeRequest) (*puppet.ContactSelfQRCodeResponse, error)
	ContactSelfName(context.Context, *puppet.ContactSelfNameRequest) (*puppet.ContactSelfNameResponse, error)
	ContactSelfSignature(context.Context, *puppet.ContactSelfSignatureRequest) (*puppet.ContactSelfSignatureResponse, error)
	//*
	//
	// Contact
	//
	ContactPayload(context.Context, *puppet.ContactPayloadRequest) (*puppet.ContactPayloadResponse, error)
	ContactAlias(context.Context, *puppet.ContactAliasRequest) (*puppet.ContactAliasResponse, error)
	ContactAvatar(context.Context, *puppet.ContactAvatarRequest) (*puppet.ContactAvatarResponse, error)
	ContactPhone(context.Context, *puppet.ContactPhoneRequest) (*puppet.ContactPhoneResponse, error)
	ContactCorporationRemark(context.Context, *puppet.ContactCorporationRemarkRequest) (*puppet.ContactCorporationRemarkResponse, error)
	ContactDescription(context.Context, *puppet.ContactDescriptionRequest) (*puppet.ContactDescriptionResponse, error)
	//*
	// Huan(202002): consider changing response to a stream in the future for better performance
	ContactList(context.Context, *puppet.ContactListRequest) (*puppet.ContactListResponse, error)
	//*
	//
	// Friendship
	//
	FriendshipPayload(context.Context, *puppet.FriendshipPayloadRequest) (*puppet.FriendshipPayloadResponse, error)
	FriendshipSearchPhone(context.Context, *puppet.FriendshipSearchPhoneRequest) (*puppet.FriendshipSearchPhoneResponse, error)
	//*
	// Huan(202203): https://github.com/wechaty/puppet/issues/181
	// @deprecated use FriendshipSearchHandle instead, will be removed in v3.0
	FriendshipSearchWeixin(context.Context, *puppet.FriendshipSearchHandleRequest) (*puppet.FriendshipSearchHandleResponse, error)
	FriendshipSearchHandle(context.Context, *puppet.FriendshipSearchHandleRequest) (*puppet.FriendshipSearchHandleResponse, error)
	FriendshipAdd(context.Context, *puppet.FriendshipAddRequest) (*puppet.FriendshipAddResponse, error)
	FriendshipAccept(context.Context, *puppet.FriendshipAcceptRequest) (*puppet.FriendshipAcceptResponse, error)
	MessageFile(context.Context, *puppet.MessageFileRequest) (*puppet.MessageFileResponse, error)
	MessageImage(context.Context, *puppet.MessageImageRequest) (*puppet.MessageImageResponse, error)
	MessageSendFile(context.Context, *puppet.MessageSendFileRequest) (*puppet.MessageSendFileResponse, error)
	MessagePayload(context.Context, *puppet.MessagePayloadRequest) (*puppet.MessagePayloadResponse, error)
	MessageContact(context.Context, *puppet.MessageContactRequest) (*puppet.MessageContactResponse, error)
	MessageMiniProgram(context.Context, *puppet.MessageMiniProgramRequest) (*puppet.MessageMiniProgramResponse, error)
	MessageUrl(context.Context, *puppet.MessageUrlRequest) (*puppet.MessageUrlResponse, error)
	MessageRecall(context.Context, *puppet.MessageRecallRequest) (*puppet.MessageRecallResponse, error)
	MessageForward(context.Context, *puppet.MessageForwardRequest) (*puppet.MessageForwardResponse, error)
	MessageLocation(context.Context, *puppet.MessageLocationRequest) (*puppet.MessageLocationResponse, error)
	MessageSendContact(context.Context, *puppet.MessageSendContactRequest) (*puppet.MessageSendContactResponse, error)
	MessageSendText(context.Context, *puppet.MessageSendTextRequest) (*puppet.MessageSendTextResponse, error)
	MessageSendMiniProgram(context.Context, *puppet.MessageSendMiniProgramRequest) (*puppet.MessageSendMiniProgramResponse, error)
	MessageSendUrl(context.Context, *puppet.MessageSendUrlRequest) (*puppet.MessageSendUrlResponse, error)
	MessageSendLocation(context.Context, *puppet.MessageSendLocationRequest) (*puppet.MessageSendLocationResponse, error)
	//*
	//
	// Room
	//
	RoomPayload(context.Context, *puppet.RoomPayloadRequest) (*puppet.RoomPayloadResponse, error)
	RoomList(context.Context, *puppet.RoomListRequest) (*puppet.RoomListResponse, error)
	RoomAdd(context.Context, *puppet.RoomAddRequest) (*puppet.RoomAddResponse, error)
	RoomAvatar(context.Context, *puppet.RoomAvatarRequest) (*puppet.RoomAvatarResponse, error)
	RoomCreate(context.Context, *puppet.RoomCreateRequest) (*puppet.RoomCreateResponse, error)
	RoomDel(context.Context, *puppet.RoomDelRequest) (*puppet.RoomDelResponse, error)
	RoomQuit(context.Context, *puppet.RoomQuitRequest) (*puppet.RoomQuitResponse, error)
	RoomTopic(context.Context, *puppet.RoomTopicRequest) (*puppet.RoomTopicResponse, error)
	RoomQRCode(context.Context, *puppet.RoomQRCodeRequest) (*puppet.RoomQRCodeResponse, error)
	RoomAnnounce(context.Context, *puppet.RoomAnnounceRequest) (*puppet.RoomAnnounceResponse, error)
	//*
	//
	// Room Member
	//
	RoomMemberPayload(context.Context, *puppet.RoomMemberPayloadRequest) (*puppet.RoomMemberPayloadResponse, error)
	RoomMemberList(context.Context, *puppet.RoomMemberListRequest) (*puppet.RoomMemberListResponse, error)
	//*
	//
	// Room Invitation
	//
	RoomInvitationPayload(context.Context, *puppet.RoomInvitationPayloadRequest) (*puppet.RoomInvitationPayloadResponse, error)
	RoomInvitationAccept(context.Context, *puppet.RoomInvitationAcceptRequest) (*puppet.RoomInvitationAcceptResponse, error)
	//*
	//
	// Tag
	//
	TagContactAdd(context.Context, *puppet.TagContactAddRequest) (*puppet.TagContactAddResponse, error)
	TagContactRemove(context.Context, *puppet.TagContactRemoveRequest) (*puppet.TagContactRemoveResponse, error)
	//*
	// Operate Sub-Collections
	//   https://cloud.google.com/apis/design/design_patterns#list_sub-collections
	TagContactDelete(context.Context, *puppet.TagContactDeleteRequest) (*puppet.TagContactDeleteResponse, error)
	TagContactList(context.Context, *puppet.TagContactListRequest) (*puppet.TagContactListResponse, error)
	//*
	// File/Blob download & upload
	Download(*puppet.DownloadRequest, Puppet_DownloadServer) error
	Upload(Puppet_UploadServer) error
	mustEmbedUnimplementedPuppetServer()
}

// UnimplementedPuppetServer must be embedded to have forward compatible implementations.
type UnimplementedPuppetServer struct {
}

func (UnimplementedPuppetServer) MessageFileStream(*puppet.MessageFileStreamRequest, Puppet_MessageFileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageFileStream not implemented")
}
func (UnimplementedPuppetServer) MessageImageStream(*puppet.MessageImageStreamRequest, Puppet_MessageImageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageImageStream not implemented")
}
func (UnimplementedPuppetServer) MessageSendFileStream(Puppet_MessageSendFileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageSendFileStream not implemented")
}
func (UnimplementedPuppetServer) Start(context.Context, *puppet.StartRequest) (*puppet.StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedPuppetServer) Stop(context.Context, *puppet.StopRequest) (*puppet.StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedPuppetServer) Logout(context.Context, *puppet.LogoutRequest) (*puppet.LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedPuppetServer) Ding(context.Context, *puppet.DingRequest) (*puppet.DingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ding not implemented")
}
func (UnimplementedPuppetServer) Version(context.Context, *puppet.VersionRequest) (*puppet.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedPuppetServer) Event(*puppet.EventRequest, Puppet_EventServer) error {
	return status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedPuppetServer) DirtyPayload(context.Context, *puppet.DirtyPayloadRequest) (*puppet.DirtyPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirtyPayload not implemented")
}
func (UnimplementedPuppetServer) ContactSelfQRCode(context.Context, *puppet.ContactSelfQRCodeRequest) (*puppet.ContactSelfQRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactSelfQRCode not implemented")
}
func (UnimplementedPuppetServer) ContactSelfName(context.Context, *puppet.ContactSelfNameRequest) (*puppet.ContactSelfNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactSelfName not implemented")
}
func (UnimplementedPuppetServer) ContactSelfSignature(context.Context, *puppet.ContactSelfSignatureRequest) (*puppet.ContactSelfSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactSelfSignature not implemented")
}
func (UnimplementedPuppetServer) ContactPayload(context.Context, *puppet.ContactPayloadRequest) (*puppet.ContactPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactPayload not implemented")
}
func (UnimplementedPuppetServer) ContactAlias(context.Context, *puppet.ContactAliasRequest) (*puppet.ContactAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactAlias not implemented")
}
func (UnimplementedPuppetServer) ContactAvatar(context.Context, *puppet.ContactAvatarRequest) (*puppet.ContactAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactAvatar not implemented")
}
func (UnimplementedPuppetServer) ContactPhone(context.Context, *puppet.ContactPhoneRequest) (*puppet.ContactPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactPhone not implemented")
}
func (UnimplementedPuppetServer) ContactCorporationRemark(context.Context, *puppet.ContactCorporationRemarkRequest) (*puppet.ContactCorporationRemarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactCorporationRemark not implemented")
}
func (UnimplementedPuppetServer) ContactDescription(context.Context, *puppet.ContactDescriptionRequest) (*puppet.ContactDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactDescription not implemented")
}
func (UnimplementedPuppetServer) ContactList(context.Context, *puppet.ContactListRequest) (*puppet.ContactListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactList not implemented")
}
func (UnimplementedPuppetServer) FriendshipPayload(context.Context, *puppet.FriendshipPayloadRequest) (*puppet.FriendshipPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipPayload not implemented")
}
func (UnimplementedPuppetServer) FriendshipSearchPhone(context.Context, *puppet.FriendshipSearchPhoneRequest) (*puppet.FriendshipSearchPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipSearchPhone not implemented")
}
func (UnimplementedPuppetServer) FriendshipSearchWeixin(context.Context, *puppet.FriendshipSearchHandleRequest) (*puppet.FriendshipSearchHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipSearchWeixin not implemented")
}
func (UnimplementedPuppetServer) FriendshipSearchHandle(context.Context, *puppet.FriendshipSearchHandleRequest) (*puppet.FriendshipSearchHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipSearchHandle not implemented")
}
func (UnimplementedPuppetServer) FriendshipAdd(context.Context, *puppet.FriendshipAddRequest) (*puppet.FriendshipAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipAdd not implemented")
}
func (UnimplementedPuppetServer) FriendshipAccept(context.Context, *puppet.FriendshipAcceptRequest) (*puppet.FriendshipAcceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipAccept not implemented")
}
func (UnimplementedPuppetServer) MessageFile(context.Context, *puppet.MessageFileRequest) (*puppet.MessageFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageFile not implemented")
}
func (UnimplementedPuppetServer) MessageImage(context.Context, *puppet.MessageImageRequest) (*puppet.MessageImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageImage not implemented")
}
func (UnimplementedPuppetServer) MessageSendFile(context.Context, *puppet.MessageSendFileRequest) (*puppet.MessageSendFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendFile not implemented")
}
func (UnimplementedPuppetServer) MessagePayload(context.Context, *puppet.MessagePayloadRequest) (*puppet.MessagePayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagePayload not implemented")
}
func (UnimplementedPuppetServer) MessageContact(context.Context, *puppet.MessageContactRequest) (*puppet.MessageContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageContact not implemented")
}
func (UnimplementedPuppetServer) MessageMiniProgram(context.Context, *puppet.MessageMiniProgramRequest) (*puppet.MessageMiniProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageMiniProgram not implemented")
}
func (UnimplementedPuppetServer) MessageUrl(context.Context, *puppet.MessageUrlRequest) (*puppet.MessageUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageUrl not implemented")
}
func (UnimplementedPuppetServer) MessageRecall(context.Context, *puppet.MessageRecallRequest) (*puppet.MessageRecallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageRecall not implemented")
}
func (UnimplementedPuppetServer) MessageForward(context.Context, *puppet.MessageForwardRequest) (*puppet.MessageForwardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageForward not implemented")
}
func (UnimplementedPuppetServer) MessageLocation(context.Context, *puppet.MessageLocationRequest) (*puppet.MessageLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageLocation not implemented")
}
func (UnimplementedPuppetServer) MessageSendContact(context.Context, *puppet.MessageSendContactRequest) (*puppet.MessageSendContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendContact not implemented")
}
func (UnimplementedPuppetServer) MessageSendText(context.Context, *puppet.MessageSendTextRequest) (*puppet.MessageSendTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendText not implemented")
}
func (UnimplementedPuppetServer) MessageSendMiniProgram(context.Context, *puppet.MessageSendMiniProgramRequest) (*puppet.MessageSendMiniProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendMiniProgram not implemented")
}
func (UnimplementedPuppetServer) MessageSendUrl(context.Context, *puppet.MessageSendUrlRequest) (*puppet.MessageSendUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendUrl not implemented")
}
func (UnimplementedPuppetServer) MessageSendLocation(context.Context, *puppet.MessageSendLocationRequest) (*puppet.MessageSendLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendLocation not implemented")
}
func (UnimplementedPuppetServer) RoomPayload(context.Context, *puppet.RoomPayloadRequest) (*puppet.RoomPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomPayload not implemented")
}
func (UnimplementedPuppetServer) RoomList(context.Context, *puppet.RoomListRequest) (*puppet.RoomListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomList not implemented")
}
func (UnimplementedPuppetServer) RoomAdd(context.Context, *puppet.RoomAddRequest) (*puppet.RoomAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAdd not implemented")
}
func (UnimplementedPuppetServer) RoomAvatar(context.Context, *puppet.RoomAvatarRequest) (*puppet.RoomAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAvatar not implemented")
}
func (UnimplementedPuppetServer) RoomCreate(context.Context, *puppet.RoomCreateRequest) (*puppet.RoomCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCreate not implemented")
}
func (UnimplementedPuppetServer) RoomDel(context.Context, *puppet.RoomDelRequest) (*puppet.RoomDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomDel not implemented")
}
func (UnimplementedPuppetServer) RoomQuit(context.Context, *puppet.RoomQuitRequest) (*puppet.RoomQuitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomQuit not implemented")
}
func (UnimplementedPuppetServer) RoomTopic(context.Context, *puppet.RoomTopicRequest) (*puppet.RoomTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomTopic not implemented")
}
func (UnimplementedPuppetServer) RoomQRCode(context.Context, *puppet.RoomQRCodeRequest) (*puppet.RoomQRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomQRCode not implemented")
}
func (UnimplementedPuppetServer) RoomAnnounce(context.Context, *puppet.RoomAnnounceRequest) (*puppet.RoomAnnounceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAnnounce not implemented")
}
func (UnimplementedPuppetServer) RoomMemberPayload(context.Context, *puppet.RoomMemberPayloadRequest) (*puppet.RoomMemberPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomMemberPayload not implemented")
}
func (UnimplementedPuppetServer) RoomMemberList(context.Context, *puppet.RoomMemberListRequest) (*puppet.RoomMemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomMemberList not implemented")
}
func (UnimplementedPuppetServer) RoomInvitationPayload(context.Context, *puppet.RoomInvitationPayloadRequest) (*puppet.RoomInvitationPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomInvitationPayload not implemented")
}
func (UnimplementedPuppetServer) RoomInvitationAccept(context.Context, *puppet.RoomInvitationAcceptRequest) (*puppet.RoomInvitationAcceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomInvitationAccept not implemented")
}
func (UnimplementedPuppetServer) TagContactAdd(context.Context, *puppet.TagContactAddRequest) (*puppet.TagContactAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagContactAdd not implemented")
}
func (UnimplementedPuppetServer) TagContactRemove(context.Context, *puppet.TagContactRemoveRequest) (*puppet.TagContactRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagContactRemove not implemented")
}
func (UnimplementedPuppetServer) TagContactDelete(context.Context, *puppet.TagContactDeleteRequest) (*puppet.TagContactDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagContactDelete not implemented")
}
func (UnimplementedPuppetServer) TagContactList(context.Context, *puppet.TagContactListRequest) (*puppet.TagContactListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagContactList not implemented")
}
func (UnimplementedPuppetServer) Download(*puppet.DownloadRequest, Puppet_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedPuppetServer) Upload(Puppet_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedPuppetServer) mustEmbedUnimplementedPuppetServer() {}

// UnsafePuppetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PuppetServer will
// result in compilation errors.
type UnsafePuppetServer interface {
	mustEmbedUnimplementedPuppetServer()
}

func RegisterPuppetServer(s grpc.ServiceRegistrar, srv PuppetServer) {
	s.RegisterService(&Puppet_ServiceDesc, srv)
}

func _Puppet_MessageFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(puppet.MessageFileStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PuppetServer).MessageFileStream(m, &puppetMessageFileStreamServer{stream})
}

type Puppet_MessageFileStreamServer interface {
	Send(*puppet.MessageFileStreamResponse) error
	grpc.ServerStream
}

type puppetMessageFileStreamServer struct {
	grpc.ServerStream
}

func (x *puppetMessageFileStreamServer) Send(m *puppet.MessageFileStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Puppet_MessageImageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(puppet.MessageImageStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PuppetServer).MessageImageStream(m, &puppetMessageImageStreamServer{stream})
}

type Puppet_MessageImageStreamServer interface {
	Send(*puppet.MessageImageStreamResponse) error
	grpc.ServerStream
}

type puppetMessageImageStreamServer struct {
	grpc.ServerStream
}

func (x *puppetMessageImageStreamServer) Send(m *puppet.MessageImageStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Puppet_MessageSendFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PuppetServer).MessageSendFileStream(&puppetMessageSendFileStreamServer{stream})
}

type Puppet_MessageSendFileStreamServer interface {
	SendAndClose(*puppet.MessageSendFileStreamResponse) error
	Recv() (*puppet.MessageSendFileStreamRequest, error)
	grpc.ServerStream
}

type puppetMessageSendFileStreamServer struct {
	grpc.ServerStream
}

func (x *puppetMessageSendFileStreamServer) SendAndClose(m *puppet.MessageSendFileStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *puppetMessageSendFileStreamServer) Recv() (*puppet.MessageSendFileStreamRequest, error) {
	m := new(puppet.MessageSendFileStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Puppet_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Start(ctx, req.(*puppet.StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Stop(ctx, req.(*puppet.StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Logout(ctx, req.(*puppet.LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Ding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.DingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Ding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Ding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Ding(ctx, req.(*puppet.DingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Version(ctx, req.(*puppet.VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Event_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(puppet.EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PuppetServer).Event(m, &puppetEventServer{stream})
}

type Puppet_EventServer interface {
	Send(*puppet.EventResponse) error
	grpc.ServerStream
}

type puppetEventServer struct {
	grpc.ServerStream
}

func (x *puppetEventServer) Send(m *puppet.EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Puppet_DirtyPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.DirtyPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).DirtyPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/DirtyPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).DirtyPayload(ctx, req.(*puppet.DirtyPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactSelfQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactSelfQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactSelfQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactSelfQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactSelfQRCode(ctx, req.(*puppet.ContactSelfQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactSelfName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactSelfNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactSelfName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactSelfName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactSelfName(ctx, req.(*puppet.ContactSelfNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactSelfSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactSelfSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactSelfSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactSelfSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactSelfSignature(ctx, req.(*puppet.ContactSelfSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactPayload(ctx, req.(*puppet.ContactPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactAlias(ctx, req.(*puppet.ContactAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactAvatar(ctx, req.(*puppet.ContactAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactPhone(ctx, req.(*puppet.ContactPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactCorporationRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactCorporationRemarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactCorporationRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactCorporationRemark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactCorporationRemark(ctx, req.(*puppet.ContactCorporationRemarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactDescription(ctx, req.(*puppet.ContactDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactList(ctx, req.(*puppet.ContactListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipPayload(ctx, req.(*puppet.FriendshipPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipSearchPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipSearchPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipSearchPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipSearchPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipSearchPhone(ctx, req.(*puppet.FriendshipSearchPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipSearchWeixin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipSearchHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipSearchWeixin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipSearchWeixin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipSearchWeixin(ctx, req.(*puppet.FriendshipSearchHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipSearchHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipSearchHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipSearchHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipSearchHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipSearchHandle(ctx, req.(*puppet.FriendshipSearchHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipAdd(ctx, req.(*puppet.FriendshipAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipAccept(ctx, req.(*puppet.FriendshipAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageFile(ctx, req.(*puppet.MessageFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageImage(ctx, req.(*puppet.MessageImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendFile(ctx, req.(*puppet.MessageSendFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessagePayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessagePayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessagePayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessagePayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessagePayload(ctx, req.(*puppet.MessagePayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageContact(ctx, req.(*puppet.MessageContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageMiniProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageMiniProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageMiniProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageMiniProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageMiniProgram(ctx, req.(*puppet.MessageMiniProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageUrl(ctx, req.(*puppet.MessageUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageRecall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageRecallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageRecall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageRecall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageRecall(ctx, req.(*puppet.MessageRecallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageForward(ctx, req.(*puppet.MessageForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageLocation(ctx, req.(*puppet.MessageLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendContact(ctx, req.(*puppet.MessageSendContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendText(ctx, req.(*puppet.MessageSendTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendMiniProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendMiniProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendMiniProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendMiniProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendMiniProgram(ctx, req.(*puppet.MessageSendMiniProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendUrl(ctx, req.(*puppet.MessageSendUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendLocation(ctx, req.(*puppet.MessageSendLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomPayload(ctx, req.(*puppet.RoomPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomList(ctx, req.(*puppet.RoomListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomAdd(ctx, req.(*puppet.RoomAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomAvatar(ctx, req.(*puppet.RoomAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomCreate(ctx, req.(*puppet.RoomCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomDel(ctx, req.(*puppet.RoomDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomQuit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomQuitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomQuit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomQuit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomQuit(ctx, req.(*puppet.RoomQuitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomTopic(ctx, req.(*puppet.RoomTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomQRCode(ctx, req.(*puppet.RoomQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomAnnounce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomAnnounceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomAnnounce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomAnnounce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomAnnounce(ctx, req.(*puppet.RoomAnnounceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomMemberPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomMemberPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomMemberPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomMemberPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomMemberPayload(ctx, req.(*puppet.RoomMemberPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomMemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomMemberList(ctx, req.(*puppet.RoomMemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomInvitationPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomInvitationPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomInvitationPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomInvitationPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomInvitationPayload(ctx, req.(*puppet.RoomInvitationPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomInvitationAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomInvitationAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomInvitationAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomInvitationAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomInvitationAccept(ctx, req.(*puppet.RoomInvitationAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_TagContactAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.TagContactAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).TagContactAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/TagContactAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).TagContactAdd(ctx, req.(*puppet.TagContactAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_TagContactRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.TagContactRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).TagContactRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/TagContactRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).TagContactRemove(ctx, req.(*puppet.TagContactRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_TagContactDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.TagContactDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).TagContactDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/TagContactDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).TagContactDelete(ctx, req.(*puppet.TagContactDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_TagContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.TagContactListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).TagContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/TagContactList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).TagContactList(ctx, req.(*puppet.TagContactListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(puppet.DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PuppetServer).Download(m, &puppetDownloadServer{stream})
}

type Puppet_DownloadServer interface {
	Send(*puppet.DownloadResponse) error
	grpc.ServerStream
}

type puppetDownloadServer struct {
	grpc.ServerStream
}

func (x *puppetDownloadServer) Send(m *puppet.DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Puppet_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PuppetServer).Upload(&puppetUploadServer{stream})
}

type Puppet_UploadServer interface {
	SendAndClose(*puppet.UploadResponse) error
	Recv() (*puppet.UploadRequest, error)
	grpc.ServerStream
}

type puppetUploadServer struct {
	grpc.ServerStream
}

func (x *puppetUploadServer) SendAndClose(m *puppet.UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *puppetUploadServer) Recv() (*puppet.UploadRequest, error) {
	m := new(puppet.UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Puppet_ServiceDesc is the grpc.ServiceDesc for Puppet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Puppet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wechaty.Puppet",
	HandlerType: (*PuppetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Puppet_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Puppet_Stop_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Puppet_Logout_Handler,
		},
		{
			MethodName: "Ding",
			Handler:    _Puppet_Ding_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Puppet_Version_Handler,
		},
		{
			MethodName: "DirtyPayload",
			Handler:    _Puppet_DirtyPayload_Handler,
		},
		{
			MethodName: "ContactSelfQRCode",
			Handler:    _Puppet_ContactSelfQRCode_Handler,
		},
		{
			MethodName: "ContactSelfName",
			Handler:    _Puppet_ContactSelfName_Handler,
		},
		{
			MethodName: "ContactSelfSignature",
			Handler:    _Puppet_ContactSelfSignature_Handler,
		},
		{
			MethodName: "ContactPayload",
			Handler:    _Puppet_ContactPayload_Handler,
		},
		{
			MethodName: "ContactAlias",
			Handler:    _Puppet_ContactAlias_Handler,
		},
		{
			MethodName: "ContactAvatar",
			Handler:    _Puppet_ContactAvatar_Handler,
		},
		{
			MethodName: "ContactPhone",
			Handler:    _Puppet_ContactPhone_Handler,
		},
		{
			MethodName: "ContactCorporationRemark",
			Handler:    _Puppet_ContactCorporationRemark_Handler,
		},
		{
			MethodName: "ContactDescription",
			Handler:    _Puppet_ContactDescription_Handler,
		},
		{
			MethodName: "ContactList",
			Handler:    _Puppet_ContactList_Handler,
		},
		{
			MethodName: "FriendshipPayload",
			Handler:    _Puppet_FriendshipPayload_Handler,
		},
		{
			MethodName: "FriendshipSearchPhone",
			Handler:    _Puppet_FriendshipSearchPhone_Handler,
		},
		{
			MethodName: "FriendshipSearchWeixin",
			Handler:    _Puppet_FriendshipSearchWeixin_Handler,
		},
		{
			MethodName: "FriendshipSearchHandle",
			Handler:    _Puppet_FriendshipSearchHandle_Handler,
		},
		{
			MethodName: "FriendshipAdd",
			Handler:    _Puppet_FriendshipAdd_Handler,
		},
		{
			MethodName: "FriendshipAccept",
			Handler:    _Puppet_FriendshipAccept_Handler,
		},
		{
			MethodName: "MessageFile",
			Handler:    _Puppet_MessageFile_Handler,
		},
		{
			MethodName: "MessageImage",
			Handler:    _Puppet_MessageImage_Handler,
		},
		{
			MethodName: "MessageSendFile",
			Handler:    _Puppet_MessageSendFile_Handler,
		},
		{
			MethodName: "MessagePayload",
			Handler:    _Puppet_MessagePayload_Handler,
		},
		{
			MethodName: "MessageContact",
			Handler:    _Puppet_MessageContact_Handler,
		},
		{
			MethodName: "MessageMiniProgram",
			Handler:    _Puppet_MessageMiniProgram_Handler,
		},
		{
			MethodName: "MessageUrl",
			Handler:    _Puppet_MessageUrl_Handler,
		},
		{
			MethodName: "MessageRecall",
			Handler:    _Puppet_MessageRecall_Handler,
		},
		{
			MethodName: "MessageForward",
			Handler:    _Puppet_MessageForward_Handler,
		},
		{
			MethodName: "MessageLocation",
			Handler:    _Puppet_MessageLocation_Handler,
		},
		{
			MethodName: "MessageSendContact",
			Handler:    _Puppet_MessageSendContact_Handler,
		},
		{
			MethodName: "MessageSendText",
			Handler:    _Puppet_MessageSendText_Handler,
		},
		{
			MethodName: "MessageSendMiniProgram",
			Handler:    _Puppet_MessageSendMiniProgram_Handler,
		},
		{
			MethodName: "MessageSendUrl",
			Handler:    _Puppet_MessageSendUrl_Handler,
		},
		{
			MethodName: "MessageSendLocation",
			Handler:    _Puppet_MessageSendLocation_Handler,
		},
		{
			MethodName: "RoomPayload",
			Handler:    _Puppet_RoomPayload_Handler,
		},
		{
			MethodName: "RoomList",
			Handler:    _Puppet_RoomList_Handler,
		},
		{
			MethodName: "RoomAdd",
			Handler:    _Puppet_RoomAdd_Handler,
		},
		{
			MethodName: "RoomAvatar",
			Handler:    _Puppet_RoomAvatar_Handler,
		},
		{
			MethodName: "RoomCreate",
			Handler:    _Puppet_RoomCreate_Handler,
		},
		{
			MethodName: "RoomDel",
			Handler:    _Puppet_RoomDel_Handler,
		},
		{
			MethodName: "RoomQuit",
			Handler:    _Puppet_RoomQuit_Handler,
		},
		{
			MethodName: "RoomTopic",
			Handler:    _Puppet_RoomTopic_Handler,
		},
		{
			MethodName: "RoomQRCode",
			Handler:    _Puppet_RoomQRCode_Handler,
		},
		{
			MethodName: "RoomAnnounce",
			Handler:    _Puppet_RoomAnnounce_Handler,
		},
		{
			MethodName: "RoomMemberPayload",
			Handler:    _Puppet_RoomMemberPayload_Handler,
		},
		{
			MethodName: "RoomMemberList",
			Handler:    _Puppet_RoomMemberList_Handler,
		},
		{
			MethodName: "RoomInvitationPayload",
			Handler:    _Puppet_RoomInvitationPayload_Handler,
		},
		{
			MethodName: "RoomInvitationAccept",
			Handler:    _Puppet_RoomInvitationAccept_Handler,
		},
		{
			MethodName: "TagContactAdd",
			Handler:    _Puppet_TagContactAdd_Handler,
		},
		{
			MethodName: "TagContactRemove",
			Handler:    _Puppet_TagContactRemove_Handler,
		},
		{
			MethodName: "TagContactDelete",
			Handler:    _Puppet_TagContactDelete_Handler,
		},
		{
			MethodName: "TagContactList",
			Handler:    _Puppet_TagContactList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MessageFileStream",
			Handler:       _Puppet_MessageFileStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MessageImageStream",
			Handler:       _Puppet_MessageImageStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MessageSendFileStream",
			Handler:       _Puppet_MessageSendFileStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Event",
			Handler:       _Puppet_Event_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _Puppet_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upload",
			Handler:       _Puppet_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "wechaty/puppet.proto",
}
